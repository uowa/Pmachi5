#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pmachi5:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * ADDED!! Require Socket.IO
 */
var io = require('socket.io')(server);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



/**
 * ADDED!! Socket.IO Connection.
 */

let user = {};
// user={socketID:{userName,msg,socketID,room,AX,AY,DIR}};

let time;
let users = { "entrance": 0, "utyu": 0 };
let room;

var crypto = require("crypto");
// var cipers = crypto.getCiphers();
// console.log(cipers);
// var hashes = crypto.getHashes();
// console.log(hashes);

function tripCreate(isTrip) {
  let tripkey = isTrip;
  let salt = tripkey + "H.";//未入力、又は1文字入れ用にH.を追加？？
  salt = salt.substr(1, 2);//2文字目と3文字目を切り出す
  salt = salt.replace(/[^.-z]/g, ".");
  salt = salt.replace(/:/g, "A");
  salt = salt.replace(/;/g, "B");
  salt = salt.replace(/</g, "C");
  salt = salt.replace(/=/g, "D");
  salt = salt.replace(/>/g, "E");
  salt = salt.replace(/\?/g, "F");
  salt = salt.replace(/@/g, "G");
  salt = salt.replace(/\[/g, "a");
  salt = salt.replace(/\\/g, "b");
  salt = salt.replace(/]/g, "c");
  salt = salt.replace(/\^/g, "d");
  salt = salt.replace(/_/g, "e");
  salt = salt.replace(/`/g, "f");
  let cipher = crypto.createCipher("des", salt);
  cipher.update(tripkey, 'utf-8', 'base64');
  let cipheredText = cipher.final('base64');
  let trip = cipheredText.substr(-10);
  trip = trip.replace(/=/g, "");//なんかよくわからんけど、高確率で後ろに==が付くので消す
  trip = "◆" + trip;
  return trip;
}


io.on('connection', function (socket) {
  //フォント切り替え
  function saikiMsg() {
    io.to(socket.id).json.emit("emitSaikiMsg", {
      msg: "ブラウザを更新してください",
    });
  }


  user[socket.id] = {
    userName: "名もなき名無し",
    AX: 457,
    AY: 80,
    DIR: "S",
    msg: "",
    avatar: "gomaNeco",
  }


  socket.on("getMySocketID", function () {//ソケットIDを送る
    io.to(socket.id).json.emit("mySocketID", {
      socketID: socket.id,
    });
  });

  socket.on("login_room", function (data) {//ログイン処理
    if (user[data.socketID]) {//サバ再起動前に開かれていたクライアントからの入力を阻止する。
      //トリップを作る
      data.userName = data.userName.replace(/◆/g, '□');
      if (data.userName.match(/#/)) {
        let index = data.userName.indexOf("#");
        let tripStr = data.userName.slice(index + 1);
        let tripName = data.userName.slice(0, index);
        data.userName = tripName + tripCreate(tripStr);
      }
      if (data.userName.match(/＃/)) {
        let index = data.userName.indexOf("＃");
        let tripStr = data.userName.slice(index + 1);
        let tripName = data.userName.slice(0, index);
        data.userName = tripName + tripCreate(tripStr);
      }
      user[data.socketID].userName = data.userName;//名前をサバに保存
      
      user[data.socketID].avatar = data.avatar;//アバターを設定
      user[data.socketID].avatarColor = data.avatarColor;//アバターの色を設定
      user[data.socketID].avatarAlpha = data.avatarAlpha;//アバターの透明度を設定

      user[data.socketID].room = data.room;//ユーザー情報に部屋を入れる
      users[data.room]++;//部屋人数を変更
      socket.join("entrance");
     
      time = " -- " + new Date().getHours().toLocaleString() + ":" + new Date().getMinutes().toLocaleString() + "--";//入室時の時間

      socket.broadcast.emit("loadAvatar", {//全体に新規入場者を読みこます、後々全体人数もここで管理していいかな
        socketID: data.socketID,
        avatar:data.avatar,
        userName: user[data.socketID].userName,
        avatarColor:user[data.socketID].avatarColor,
        avatarAlpha:user[data.socketID].avatarAlpha,
      });

      io.to(socket.id).json.emit("login_me", {
        user: user,
        users: users[data.room],
        msg: user[data.socketID].userName + "が" + data.room + "に入室しました。" + time,
      });

      socket.broadcast.to(data.room).emit("login_room", {
        socketID: data.socketID,
        msg: user[data.socketID].userName + "が" + data.room + "に入室しました。" + time,
        users: users[data.room],
      });
    } else {
      saikiMsg();//再起動メッセージを送る
    }
  });

  socket.on("join_room", function (data) {
    if (user[data.socketID]) {////サバ再起動前に開かれていたクライアントからの入力を阻止する。
      time = " -- " + new Date().getHours().toLocaleString() + ":" + new Date().getMinutes().toLocaleString() + "--";//入室時の時間
      let before = data.beforeRoom;
      let after = data.afterRoom;
      socket.leave(before);
      socket.join(after);
      users[before]--//入室前の部屋人数を減らす
      users[after]++;//入室後の部屋人数を増やす
      
      user[data.socketID].room = data.afterRoom;
      user[data.socketID].AX = data.AX;
      user[data.socketID].AY = data.AY;
      user[data.socketID].DIR = data.DIR;
      user[data.socketID].msg = "";
      io.to(socket.id).json.emit("join_self", {
        user: user,
        room: data.afterRoom,
        msg: user[data.socketID].userName + "が" + data.beforeRoom + "から移動してきました。" + time,
        users: users[after],
      });

      socket.broadcast.to(after).emit("join_nonself", {
        socketID: data.socketID,
        room:data.afterRoom,
        msg: user[data.socketID].userName + "が" + data.beforeRoom + "から移動してきました。"+time,
        users: users[data.afterRoom],
        AX: data.AX,
        AY: data.AY,
      });
        
    } else {
      saikiMsg();
    }
  });



  //クライアントからメッセージを受け取って送信
  socket.on("emit_msg", function (data) {
    if (user[data.socketID]) {//サバ再起動前に開かれていたクライアントからの入力を阻止する。
      if (data.kanban) {
        user[data.socketID].msg = data.msg;

        //最後に発言したkanbanをuserの最後に入れなおす
        let value = user[data.socketID];
        delete user[data.socketID];
        user[data.socketID] = value;
      } else {//kanbanじゃないなら、userのメッセージ情報は消しとく
        user[data.socketID].msg = "";
      }

      io.to(user[data.socketID].room).emit("emit_msg", {
        userName: user[data.socketID].userName,
        msg: data.msg,
        socketID: data.socketID,
        avaMsg: data.msg,
        abonClass: user[data.socketID].socketID,//あとで考える！！！！！！！！！
        kanban: data.kanban,
      });
    } else {
      saikiMsg();
    }
  });

  //アボンの時
  socket.on("abonSetting", function (data) {
    if (user[data.socketID]) {//サバ再起動前に開かれていたクライアントからの入力を阻止する。
      let abonMsg;
      let abonAvaMsg;
      if (user[data.socketID] == null) {
        abonMsg = "その住民は退出済みです";
      } else if (data.setAbon) {
        abonMsg = user[data.socketID].userName + "をアボンしました。";
        abonAvaMsg = "アボン";//吹き出しをアボンにする。
      } else {
        abonMsg = user[data.socketID].userName + "のあぼんをやめました";
        abonAvaMsg = "";
      }
      io.to(socket.id).json.emit("abonSetting", {
        msg: abonMsg,
        socketID: data.socketID,
        avaMsg: abonAvaMsg,
        AX: user[data.socketID].AX,
        AY: user[data.socketID].AY,
        DIR: user[data.socketID].DIR,
      });
    } else {
      saikiMsg();//再起動メッセージを送る
    }
  });

  //クリックイベント
  socket.on('tapMap', function (data) {
    if (user[data.socketID]) {//サバ再起動前に開かれていたクライアントからの入力を阻止する。
      user[data.socketID].DIR = data.DIR;
      user[data.socketID].AX = data.AX;
      user[data.socketID].AY = data.AY;

      socket.broadcast.to(user[data.socketID].room).emit("tapMap", {
        DIR: data.DIR,
        socketID: data.socketID,
        AX: data.AX,
        AY: data.AY,
      });
    } else {
      saikiMsg();//再起動メッセージを送る
    }
  });

  socket.on("alphaChenge", function (data) {
    user[socket.id].avatarAlpha = data.alpha;//アバターの透明度を設定
    socket.broadcast.emit("alphaChenge", {
      alpha: data.alpha,
      socketID: socket.id,
    });
  });


  //退出時
  socket.on("disconnect", function () {
    users[user[socket.id].room]--;

    time = " -- " + new Date().getHours().toLocaleString() + ":" + new Date().getMinutes().toLocaleString() + "--";

    io.to(user[socket.id].room).emit("logout", {
      socketID: socket.id,
      msg: user[socket.id].userName + "が退出しました。" + time,
      room: user[socket.id].room,
      users: users[user[socket.id].room],
    });
    delete user[socket.id];

  });
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
